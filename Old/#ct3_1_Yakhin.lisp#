




(defmacro cut (&rest rest)
    (labels ((repl (item seq1 seq2)
              (if seq2
                (if (listp (car seq2))
                   (cons (repl item seq1 (car seq2)) (repl item seq1 (cdr seq2)))
                (if (eql (car seq2) item)
                    (let ((x (gensym)))
                        (setf (car seq1) (append (car seq1) (list x)))
                        (cons x (repl item seq1 (cdr seq2))))
                    (cons (car seq2) (repl item seq1 (cdr seq2))))))))
	(let* ((nlst '(nil)) (nrest (repl '_ nlst rest)))
        `(lambda ,@nlst (,@nrest)))))


(defun repl (item seq1 seq2)
    (if seq2
        (if (listp (car seq2))
	    (cons (repl item seq1 (car seq2)) (repl item seq1 (cdr seq2)))
	    (if (eql (car seq2) item)
		(let ((x (gensym)))
		    (setf (car seq1) (append (car seq1) (list x)))
		    (cons x (repl item seq1 (cdr seq2))))
		(cons (car seq2) (repl item seq1 (cdr seq2)))))))


(defun repl (seq1 seq2)
    (if seq2
        (if (listp (car seq2))
	    (cons (repl seq1 (car seq2)) (repl (subseq seq1 (count_ (car seq2))) seq1 (cdr seq2)))
	    (if (eql (car seq2) '_)
		(let ((x (gensym)))
		    (setf (car seq1) (append (car seq1) (list x)))
		    (cons x (repl seq1 (cdr seq2))))
		(cons (car seq2) (repl seq1 (cdr seq2)))))))

(defun flatten (lst)
    (mapcan (lambda (x)
		(if (atom x)
		    (list x)
		    (flatten x)))
	    lst))

(defun count_ (lst)
    (count '_ (flatten lst))) 

(defun crt-vars (n)
    (if (/= 0 n)
	(cons (read-from-string (concatenate 'string "variable" (write-to-string n)))  (crt-vars (- n 1)))))

(defmacro cut (&rest rest)
    (labels* (
	      (flatten (lst)
		       (mapcan (lambda (x)
				   (if (atom x)
				       (list x)
				       (flatten x)))
			       lst))
	      (count_ (lst)
		      (count '_ (flatten lst)))
	      (repl (seq1 seq2)
		    (if seq2
			(if (listp (car seq2))
			    (cons (repl seq1 (car seq2)) (repl (subseq seq1 (count_ (car seq2))) (cdr seq2)))
			    (if (eql (car seq2) '_)
				(cons (pop seq1) (repl seq1 (cdr seq2)))
				(cons (car seq2) (repl seq1 (cdr seq2)))))))
	      crt-vars (n)
	      (if (/= 0 n)
		  (cons (read-from-string (concatenate 'string "variable" (write-to-string n)))  (crt-vars (- n 1)))))
	     (let* ((nlst '(nil)) (nrest (repl '_ nlst rest)))
		 `(lambda ,@nlst (,@nrest)))))



